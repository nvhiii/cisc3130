Nahi Khan
CISC 3130 - Data Structures
Professor Lowenthal
Spring 2022

2.2.22 Notes
- Check blackboard
- Lists, Binary Search, Review
- Downsides of lists, you can only start from the start
- Binary search can start from both sides

2.9.22 - Queues and Stacks
1. Queues
- search from front and back (FIFO - first in, first out)

Definition: Is an ordered set of items from which items may be removed from the front and added to the end (input queue)
    Examples: email, the punch-card programming clock contraption, printer, teleprocessing (messages)

There are 3 routines associated with queues:
    1. Remove
        adds 1 to rear then sticks in the information and in the beginning it checks if adding 1 it equals to rear
        if (front == rear) cannot
        - move up 1 then remove the data (if front and rear equal, the queue is empty)
        - Checks if front equal rear
        - then give message
        - cannot remove if empty
        - if not a problem, add 1 to front and take out info
        - if not true, then do rear++
            - remove first
            - check if ++ makes it higher than the array size
            - if so, then circle around to index 0
    2. Insert
    - check if front == rear
    - front up 1
    -
    ^ Remove and Insert are used together (Array usage, bank line example of size 5 array from class)
        ** in this example, new person is inserted at the end of the line at first, which is position 0, then people are inserted at the end of the line until the array size is reached,
            then the rear becomes the end of the line, so the new person is inserted at the queue at position 0 after the algorithm removes the old position 0

            The array has to be full in order for the remove to work
            Remove only works when insert makes the array size equal to greater than the array size
            This is turn changes the rear and front positioning as the front moves back one index as the rear moves back as well

            First add 1 to rear then stick the rear value in and move front up an index if the index size isnt greater than the length of the array

    3. Empty v. Full

    ** The computer cannot differentiate between empty and rear

Ascending Priority Queues
    - only the smallest item can be removed.
    - same adding method as descending queue (add to rear)

Descending Priority Queues
    - only the largest item can be removed
    - sae adding method as ascending (add to rear)


(use data structure list as a queue or a stack)

2. Stacks
- only from the back
- LIFO (Last in, first out)
    Definition: an ordered set of items from which items may be removed (or deleted) and into which new items may be inserted at one end called the top of the stack

There are 3 routines associated with stacks:

    1. Pop
        - An item is removed from the top of the stack

    2. Push
        - An item is added to the top of the stack

    3. Empty
        - it returns a value of true or false to let us know if there are any items on the stack

    4. Top Stack
        - Gives you the values that are in the top element of the stack without removing it


    -- START OF THE X3 WORKSHEET OF PREFIX, INFIX, and POSTFIX EXPRESSIONS --

    A correct math problem has 1 more operand than operator

Chapter 20: Stacks and Queues

20.1 - Stacks and Their Applications

Definition: A stack is a collection of items that allows addition and removal of items in a last-in-first-out manner (LIFO)
    ** Can be implemented through lists, arrays, and arraylists

       e.g.:
       Single-car garages

Stack Operations
    1. Push - takes a single item and adds it to the top of the stack
    2. Peek - returns the item currently at the top of the stack, but does not remove it
    3. Pop - removes and returns the item currently stored at the top of the stack

Stack Class Methods

    Stack<E>() // Constructor

    E push(E item) // Adds item to top of stack and returns said item

    E pop() // Removes and returns the item at the top of the stack. (If empty, EmptyStackException thrown)

    E peek() // Returns the item at top of stack exclusively (If empty stack, throws EmptyStackException)

    boolean empty() // Returns boolean value true if stack is empty and false otherwise

Relevant Code:
StackDemo1.java
StackDemo2.java

2.16.2022 Notes
Prefix, Infix, and Postfix Notation

Infix - is what us humans are used to

Prefix - operators in front of the operands
    ** do some practice here

Postfix - operators after the operands
    ** do some practice here

How stacks work with recursion and in postfix/prefix notation
    - COMPUTER ONLY READS POSTFIX, THUS EVERY PROBLEM IS FIRST CONVERTED INTO POSTFIX
    - computer reads from left to right
    - now computer checks if the first thing is an operand or operator
    - if operand, it goes onto the string
    - if operator, the operator is compared to what is on top of the stack
        - if stack empty, the operator goes onto top of stack
        - also if the operator is higher in precedence than that on top of the stack, add it to the top of the stack
        - if operator is equal in precedence to the top of stack, remove the top of stack and add it to the string and add the new operator to the top of the stack
        - if the operator is a parentheses, it goes on top of the stack and corresponding operators go on top until the closing parentheses is reached
        - if the operator reached in the closing parentheses, pop everything up to the opening parentheses onto the string


Truth-teller paradox
Answer: Ask the truth-teller or the liar-teller what the other guy is saying

3.22.2022 Notes

- 